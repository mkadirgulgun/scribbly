@model ResetPasswordViewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Şifre Sıfırla</title>
    <style>
        body {
            margin: 0;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background-color: #fafafa;
        }

        .card {
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }

        .logo {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .logo-icon {
            width: 24px;
            height: 24px;
            background-color: #4747ff;
            border-radius: 4px;
            position: relative;
        }

            .logo-icon::before {
                content: "✎";
                color: white;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
            }

        .logo-text {
            font-size: 1.5rem;
            font-weight: 600;
        }

        h1 {
            font-size: 1.5rem;
            margin: 1rem 0;
            text-align: center;
        }

        p {
            color: #666;
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .input-wrapper {
            position: relative;
        }

        input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 0.5rem;
            box-sizing: border-box;
            font-size: 1rem;
        }

            input:focus {
                outline: none;
                border-color: #4747ff;
            }

        .toggle-password {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            border: none;
            background: none;
            cursor: pointer;
            color: #666;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .requirements {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.875rem;
            color: #666;
            margin-top: 0.25rem;
        }

        .error-message {
            color: #dc2626;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }

        input.error {
            border-color: #dc2626;
        }

            input.error ~ .error-message {
                display: block;
            }

        button[type="submit"] {
            width: 100%;
            padding: 0.75rem;
            background-color: #4747ff;
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

            button[type="submit"]:hover {
                background-color: #3939cc;
            }
    </style>
</head>
<body>
    <div class="card">
        <div class="logo">
            <div class="logo-icon"></div>
            <div class="logo-text">Notlar</div>
        </div>
        <h1>Şifrenizi Sıfırlayın</h1>
        <p>Hesabınızı güvenceye almak için yeni bir şifre seçin.</p>
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-info" role="alert">
                @TempData["SuccessMessage"]
            </div>
        }

        <div asp-validation-summary=ModelOnly class="alert alert-danger" role="alert">
        </div>

        <form id="resetForm" asp-controller="Home" asp-action="ResetPassword" method="post">
            <div class="form-group">
                <label for="Password">Yeni Şifre</label>
                <div class="input-wrapper">
                    <input type="password"
                           id="newPassword"
                           asp-for="Password"
                           required
                           minlength="6">
                    <button type="button" class="toggle-password" aria-label="Şifre görünürlüğünü değiştir">👁️</button>
                    <span class="text-danger" asp-validation-for="Password"></span>
                </div>
                <div class="requirements">
                    <span>🔑</span>
                    En az 8 karakter
                </div>
            </div>
            <div class="form-group">
                <label for="PasswordConfirm">Yeni Şifreyi Onayla</label>
                <div class="input-wrapper">
                    <input type="password"
                           id="confirmPassword"
                           asp-for="PasswordConfirm"
                           required>
                    <button type="button" class="toggle-password" aria-label="Şifre görünürlüğünü değiştir">👁️</button>
                    <span class="text-danger" asp-validation-for="PasswordConfirm"></span>
                </div>
                <div class="error-message">Şifreler eşleşmiyor</div>
            </div>
            <button type="submit">Şifreyi Sıfırla</button>
        </form>
    </div>

    <script>
        const form = document.getElementById('resetForm');
        const newPassword = document.getElementById('newPassword');
        const confirmPassword = document.getElementById('confirmPassword');
        const toggleButtons = document.querySelectorAll('.toggle-password');

        // Şifre görünürlüğünü değiştir
        toggleButtons.forEach(button => {
            button.addEventListener('click', () => {
                const input = button.previousElementSibling;
                input.type = input.type === 'password' ? 'text' : 'password';
            });
        });

        // Şifrelerin eşleştiğini doğrula
        function validatePasswords() {
            if (confirmPassword.value && newPassword.value !== confirmPassword.value) {
                confirmPassword.classList.add('error');
                return false;
            } else {
                confirmPassword.classList.remove('error');
                return true;
            }
        }

        // Şifreleri giriş sırasında kontrol et
        confirmPassword.addEventListener('input', validatePasswords);
        newPassword.addEventListener('input', () => {
            if (confirmPassword.value) {
                validatePasswords();
            }
        });
    </script>
</body>
</html>
